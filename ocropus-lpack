#!/usr/bin/python

from pylab import *
import numpy,os,os.path,sys,time,fcntl,multiprocessing,argparse,codecs,traceback,glob
import random as pyrandom
import tables
from tables import openFile,Filters,Int32Atom,Float32Atom,Int64Atom

if 0:
    parser = argparse.ArgumentParser(description = "Concatenate data files.")
    parser.add_argument('inputs',nargs="+")
    parser.add_argument('-N','--nsamples',type=int,default=int(1e9),help="copy at most this many samples")
    parser.add_argument('-s','--select',default=None,help="select only classes matching the regular expression")
    parser.add_argument('-r','--regex',nargs="*",default=[],help="perform regular expression replacements on classes; /old/new/")
    parser.add_argument('-o','--output',help="output file")
    args = parser.parse_args(sys.argv[2:])

files = sorted(glob.glob("/home/tmb/ocrotest/uw3-500/book/????/??????.bin.png"))

odb = openFile("lines.h5","w")
odb.createEArray(odb.root,"dims",tables.Int32Atom(),shape=(0,2),filters=tables.Filters(9))
odb.createVLArray(odb.root,"lines",tables.Float32Atom(),filters=tables.Filters(9))
odb.createVLArray(odb.root,"transcripts",tables.Int32Atom(),filters=tables.Filters(9))
for fname in files:
    print fname
    image = imread(fname)
    if len(image.shape)==3: image = mean(image,axis=2)
    odb.root.dims.append(array([image.shape]))
    odb.root.lines.append(image.ravel())
    odb.root.transcripts.append(zeros(1,'i'))
odb.close()


